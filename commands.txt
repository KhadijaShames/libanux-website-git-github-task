First , i opened the search and wrote: git cmd

#cd downloads => is used to change the current directory to a folder named "downloads"

#git --v => to make sure it exists and what its version are

#git status => to know the condition he is in now

#mkdir libanux-website => to create a folder

#cd libanux-website => we have entered the file

#git init => the command git init converts any regular folder into a Git project

#notepad README.md => you can create a file and open it in Notepad to write or add whatever you want inside ( searched for something similar to nano but for Windows, i could also create it using the touch command)

#notepad index.html => i created another file 

#git add . => this will add the files in the current directory(and subdirectories) to the staging area

#git commit -m "chore: initial website structure with README and index.html" => to commit the changes you've added to the staging area with the message description

#git config --global user.name "Khadija" => set or change the username 

#git config --global user.email "khadija@example.com" => set or change the email

#git config --list => the command displays all the configuration settings for Git, including user information, editor settings, and other configurations that have been set either globally or locally for the repository

#git remote add origin https://github.com/KhadijaShames/libanux-website-git-github-task.gi => the command is used to link your local Git repository to a remote repository (e.g., on GitHub, GitLab, or Bitbucket)
Hereâ€™s the translation of your Git commands and explanations in English:

#git branch -M main => renamed the current branch to main

#git push -u origin main => used when you want to push to the main branch on GitHub for the first time.

#notepad commands.txt => created a file named commands.txt in Notepad 

#notepad libanux.html => created a file named libanux.html in Notepad

#git add libanux.html => instead of using ., we specify the exact file (libanux.html) because we only want to add this specific file

#git commit -m "feat: add libanux.html with logo and company name" => saves the changes with a message describing the modification (adding libanux.html with a logo and company name).

#git push origin main => used to push changes to the main branch on GitHub

#git pull origin main => pulled the latest changes from GitHub (for example, changes made to the README file). If a conflict arises, it opened another page, and you resolved it using the next command

#git pull origin main --no-edit => this command is used when pulling from main and merging changes without editing the commit message

#git push origin main => again, used to push changes to the main branch on GitHub

#git add logo.png => added the logo.png file to be tracked by Git

#git commit -m "add: logo image for libanux website" => committed the addition of the logo image with a descriptive message

#git push origin main => pushed the changes, including the new logo image, to the main branch on GitHub

#git add commands.txt => added the commands.txt file to be tracked by Git

#git commit -m "docs: add commands.txt with Git command history" => Committed the addition of the commands.txt file with a comment describing its content (Git command history)

#git push origin main => pushed the commands.txt file update to the main branch on GitHub

#mkdir pages styles assets scripts => this command creates four directories (folders): pages, styles, assets, and scripts. These are used to organize the project structure.
pages: Will hold the HTML files
styles: Will contain the CSS files
assets: Will store images, fonts, and other static assets
scripts: Will hold JavaScript files

#cd pages => this changes the current directory to the pages folder you just created

#notepad aboutUs.html => this opens Notepad and creates the aboutUs.html file inside the pages directory

#notepad contactUs.html => this opens Notepad and creates the contactUs.html file inside the pages directory

#cd .. => this moves you back one level to the parent directory (back to the root of your project)

#cd styles => this changes the current directory to the styles folder

#notepad styles.css => this opens Notepad and creates the styles.css file inside the styles directory

#cd .. => this takes you back to the parent directory

#cd assets => this changes the current directory to the assets folder

#mkdir images => this creates a folder named images inside the assets folder to store image files

#cd .. => this takes you back to the parent directory

#cd scripts => this changes the current directory to the scripts folder.

#notepad main.js => this opens Notepad and creates the main.js file inside the scripts directory.

#cd .. => this takes you back to the root of the project.

#code . => this opens the current directory in Visual Studio Code. If you're using VS Code, this command launches the editor to work on your files

#git add . => this stages all the changes made (i.e., the files and folders you created or modified) in the current directory and subdirectories, preparing them to be committed

#git commit -m "feat: update website structure with pages, styles, and logo" => this commits the staged changes with the message "feat: update website structure with pages, styles, and logo". It describes the changes 
you made to the website structure, such as adding new pages, styles, and assets (like logos)

#git pull origin main --no-edit => this pulls the latest changes from the main branch on GitHub, and merges them into your local repository without changing the commit message 
(since you're using the --no-edit option). This is helpful if someone else has pushed changes to the repository that you need to integrate into your local version

#git push origin main => this pushes your local changes (committed files) to the main branch on the remote GitHub repository